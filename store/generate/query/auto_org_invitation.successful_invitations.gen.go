// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Nicknamezz00/org-invitation-autobot/store/generate/model"
)

func newSuccessfulInvitationModel(db *gorm.DB, opts ...gen.DOOption) successfulInvitationModel {
	_successfulInvitationModel := successfulInvitationModel{}

	_successfulInvitationModel.successfulInvitationModelDo.UseDB(db, opts...)
	_successfulInvitationModel.successfulInvitationModelDo.UseModel(&model.SuccessfulInvitationModel{})

	tableName := _successfulInvitationModel.successfulInvitationModelDo.TableName()
	_successfulInvitationModel.ALL = field.NewAsterisk(tableName)
	_successfulInvitationModel.ID = field.NewString(tableName, "id")
	_successfulInvitationModel.OrderID = field.NewInt64(tableName, "order_id")
	_successfulInvitationModel.GithubUsername = field.NewString(tableName, "github_username")
	_successfulInvitationModel.GithubEmail = field.NewString(tableName, "github_email")
	_successfulInvitationModel.InvitationStatus = field.NewString(tableName, "invitation_status")
	_successfulInvitationModel.SucceededAt = field.NewTime(tableName, "succeeded_at")

	_successfulInvitationModel.fillFieldMap()

	return _successfulInvitationModel
}

type successfulInvitationModel struct {
	successfulInvitationModelDo successfulInvitationModelDo

	ALL              field.Asterisk
	ID               field.String
	OrderID          field.Int64
	GithubUsername   field.String
	GithubEmail      field.String
	InvitationStatus field.String
	SucceededAt      field.Time

	fieldMap map[string]field.Expr
}

func (s successfulInvitationModel) Table(newTableName string) *successfulInvitationModel {
	s.successfulInvitationModelDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s successfulInvitationModel) As(alias string) *successfulInvitationModel {
	s.successfulInvitationModelDo.DO = *(s.successfulInvitationModelDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *successfulInvitationModel) updateTableName(table string) *successfulInvitationModel {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.OrderID = field.NewInt64(table, "order_id")
	s.GithubUsername = field.NewString(table, "github_username")
	s.GithubEmail = field.NewString(table, "github_email")
	s.InvitationStatus = field.NewString(table, "invitation_status")
	s.SucceededAt = field.NewTime(table, "succeeded_at")

	s.fillFieldMap()

	return s
}

func (s *successfulInvitationModel) WithContext(ctx context.Context) ISuccessfulInvitationModelDo {
	return s.successfulInvitationModelDo.WithContext(ctx)
}

func (s successfulInvitationModel) TableName() string {
	return s.successfulInvitationModelDo.TableName()
}

func (s successfulInvitationModel) Alias() string { return s.successfulInvitationModelDo.Alias() }

func (s successfulInvitationModel) Columns(cols ...field.Expr) gen.Columns {
	return s.successfulInvitationModelDo.Columns(cols...)
}

func (s *successfulInvitationModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *successfulInvitationModel) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["order_id"] = s.OrderID
	s.fieldMap["github_username"] = s.GithubUsername
	s.fieldMap["github_email"] = s.GithubEmail
	s.fieldMap["invitation_status"] = s.InvitationStatus
	s.fieldMap["succeeded_at"] = s.SucceededAt
}

func (s successfulInvitationModel) clone(db *gorm.DB) successfulInvitationModel {
	s.successfulInvitationModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s successfulInvitationModel) replaceDB(db *gorm.DB) successfulInvitationModel {
	s.successfulInvitationModelDo.ReplaceDB(db)
	return s
}

type successfulInvitationModelDo struct{ gen.DO }

type ISuccessfulInvitationModelDo interface {
	gen.SubQuery
	Debug() ISuccessfulInvitationModelDo
	WithContext(ctx context.Context) ISuccessfulInvitationModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISuccessfulInvitationModelDo
	WriteDB() ISuccessfulInvitationModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISuccessfulInvitationModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISuccessfulInvitationModelDo
	Not(conds ...gen.Condition) ISuccessfulInvitationModelDo
	Or(conds ...gen.Condition) ISuccessfulInvitationModelDo
	Select(conds ...field.Expr) ISuccessfulInvitationModelDo
	Where(conds ...gen.Condition) ISuccessfulInvitationModelDo
	Order(conds ...field.Expr) ISuccessfulInvitationModelDo
	Distinct(cols ...field.Expr) ISuccessfulInvitationModelDo
	Omit(cols ...field.Expr) ISuccessfulInvitationModelDo
	Join(table schema.Tabler, on ...field.Expr) ISuccessfulInvitationModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISuccessfulInvitationModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISuccessfulInvitationModelDo
	Group(cols ...field.Expr) ISuccessfulInvitationModelDo
	Having(conds ...gen.Condition) ISuccessfulInvitationModelDo
	Limit(limit int) ISuccessfulInvitationModelDo
	Offset(offset int) ISuccessfulInvitationModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISuccessfulInvitationModelDo
	Unscoped() ISuccessfulInvitationModelDo
	Create(values ...*model.SuccessfulInvitationModel) error
	CreateInBatches(values []*model.SuccessfulInvitationModel, batchSize int) error
	Save(values ...*model.SuccessfulInvitationModel) error
	First() (*model.SuccessfulInvitationModel, error)
	Take() (*model.SuccessfulInvitationModel, error)
	Last() (*model.SuccessfulInvitationModel, error)
	Find() ([]*model.SuccessfulInvitationModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SuccessfulInvitationModel, err error)
	FindInBatches(result *[]*model.SuccessfulInvitationModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SuccessfulInvitationModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISuccessfulInvitationModelDo
	Assign(attrs ...field.AssignExpr) ISuccessfulInvitationModelDo
	Joins(fields ...field.RelationField) ISuccessfulInvitationModelDo
	Preload(fields ...field.RelationField) ISuccessfulInvitationModelDo
	FirstOrInit() (*model.SuccessfulInvitationModel, error)
	FirstOrCreate() (*model.SuccessfulInvitationModel, error)
	FindByPage(offset int, limit int) (result []*model.SuccessfulInvitationModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISuccessfulInvitationModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s successfulInvitationModelDo) Debug() ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Debug())
}

func (s successfulInvitationModelDo) WithContext(ctx context.Context) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s successfulInvitationModelDo) ReadDB() ISuccessfulInvitationModelDo {
	return s.Clauses(dbresolver.Read)
}

func (s successfulInvitationModelDo) WriteDB() ISuccessfulInvitationModelDo {
	return s.Clauses(dbresolver.Write)
}

func (s successfulInvitationModelDo) Session(config *gorm.Session) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Session(config))
}

func (s successfulInvitationModelDo) Clauses(conds ...clause.Expression) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s successfulInvitationModelDo) Returning(value interface{}, columns ...string) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s successfulInvitationModelDo) Not(conds ...gen.Condition) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s successfulInvitationModelDo) Or(conds ...gen.Condition) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s successfulInvitationModelDo) Select(conds ...field.Expr) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s successfulInvitationModelDo) Where(conds ...gen.Condition) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s successfulInvitationModelDo) Order(conds ...field.Expr) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s successfulInvitationModelDo) Distinct(cols ...field.Expr) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s successfulInvitationModelDo) Omit(cols ...field.Expr) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s successfulInvitationModelDo) Join(table schema.Tabler, on ...field.Expr) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s successfulInvitationModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s successfulInvitationModelDo) RightJoin(table schema.Tabler, on ...field.Expr) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s successfulInvitationModelDo) Group(cols ...field.Expr) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s successfulInvitationModelDo) Having(conds ...gen.Condition) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s successfulInvitationModelDo) Limit(limit int) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s successfulInvitationModelDo) Offset(offset int) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s successfulInvitationModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s successfulInvitationModelDo) Unscoped() ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Unscoped())
}

func (s successfulInvitationModelDo) Create(values ...*model.SuccessfulInvitationModel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s successfulInvitationModelDo) CreateInBatches(values []*model.SuccessfulInvitationModel, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s successfulInvitationModelDo) Save(values ...*model.SuccessfulInvitationModel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s successfulInvitationModelDo) First() (*model.SuccessfulInvitationModel, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SuccessfulInvitationModel), nil
	}
}

func (s successfulInvitationModelDo) Take() (*model.SuccessfulInvitationModel, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SuccessfulInvitationModel), nil
	}
}

func (s successfulInvitationModelDo) Last() (*model.SuccessfulInvitationModel, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SuccessfulInvitationModel), nil
	}
}

func (s successfulInvitationModelDo) Find() ([]*model.SuccessfulInvitationModel, error) {
	result, err := s.DO.Find()
	return result.([]*model.SuccessfulInvitationModel), err
}

func (s successfulInvitationModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SuccessfulInvitationModel, err error) {
	buf := make([]*model.SuccessfulInvitationModel, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s successfulInvitationModelDo) FindInBatches(result *[]*model.SuccessfulInvitationModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s successfulInvitationModelDo) Attrs(attrs ...field.AssignExpr) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s successfulInvitationModelDo) Assign(attrs ...field.AssignExpr) ISuccessfulInvitationModelDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s successfulInvitationModelDo) Joins(fields ...field.RelationField) ISuccessfulInvitationModelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s successfulInvitationModelDo) Preload(fields ...field.RelationField) ISuccessfulInvitationModelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s successfulInvitationModelDo) FirstOrInit() (*model.SuccessfulInvitationModel, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SuccessfulInvitationModel), nil
	}
}

func (s successfulInvitationModelDo) FirstOrCreate() (*model.SuccessfulInvitationModel, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SuccessfulInvitationModel), nil
	}
}

func (s successfulInvitationModelDo) FindByPage(offset int, limit int) (result []*model.SuccessfulInvitationModel, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s successfulInvitationModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s successfulInvitationModelDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s successfulInvitationModelDo) Delete(models ...*model.SuccessfulInvitationModel) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *successfulInvitationModelDo) withDO(do gen.Dao) *successfulInvitationModelDo {
	s.DO = *do.(*gen.DO)
	return s
}
