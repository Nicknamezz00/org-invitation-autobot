// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Nicknamezz00/org-invitation-autobot/store/generate/model"
)

func newFailedInvitationModel(db *gorm.DB, opts ...gen.DOOption) failedInvitationModel {
	_failedInvitationModel := failedInvitationModel{}

	_failedInvitationModel.failedInvitationModelDo.UseDB(db, opts...)
	_failedInvitationModel.failedInvitationModelDo.UseModel(&model.FailedInvitationModel{})

	tableName := _failedInvitationModel.failedInvitationModelDo.TableName()
	_failedInvitationModel.ALL = field.NewAsterisk(tableName)
	_failedInvitationModel.ID = field.NewString(tableName, "id")
	_failedInvitationModel.OrderID = field.NewInt64(tableName, "order_id")
	_failedInvitationModel.GithubUsername = field.NewString(tableName, "github_username")
	_failedInvitationModel.GithubEmail = field.NewString(tableName, "github_email")
	_failedInvitationModel.InvitationStatus = field.NewString(tableName, "invitation_status")
	_failedInvitationModel.FailedAt = field.NewTime(tableName, "failed_at")

	_failedInvitationModel.fillFieldMap()

	return _failedInvitationModel
}

type failedInvitationModel struct {
	failedInvitationModelDo failedInvitationModelDo

	ALL              field.Asterisk
	ID               field.String
	OrderID          field.Int64
	GithubUsername   field.String
	GithubEmail      field.String
	InvitationStatus field.String
	FailedAt         field.Time

	fieldMap map[string]field.Expr
}

func (f failedInvitationModel) Table(newTableName string) *failedInvitationModel {
	f.failedInvitationModelDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f failedInvitationModel) As(alias string) *failedInvitationModel {
	f.failedInvitationModelDo.DO = *(f.failedInvitationModelDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *failedInvitationModel) updateTableName(table string) *failedInvitationModel {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewString(table, "id")
	f.OrderID = field.NewInt64(table, "order_id")
	f.GithubUsername = field.NewString(table, "github_username")
	f.GithubEmail = field.NewString(table, "github_email")
	f.InvitationStatus = field.NewString(table, "invitation_status")
	f.FailedAt = field.NewTime(table, "failed_at")

	f.fillFieldMap()

	return f
}

func (f *failedInvitationModel) WithContext(ctx context.Context) IFailedInvitationModelDo {
	return f.failedInvitationModelDo.WithContext(ctx)
}

func (f failedInvitationModel) TableName() string { return f.failedInvitationModelDo.TableName() }

func (f failedInvitationModel) Alias() string { return f.failedInvitationModelDo.Alias() }

func (f failedInvitationModel) Columns(cols ...field.Expr) gen.Columns {
	return f.failedInvitationModelDo.Columns(cols...)
}

func (f *failedInvitationModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *failedInvitationModel) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["order_id"] = f.OrderID
	f.fieldMap["github_username"] = f.GithubUsername
	f.fieldMap["github_email"] = f.GithubEmail
	f.fieldMap["invitation_status"] = f.InvitationStatus
	f.fieldMap["failed_at"] = f.FailedAt
}

func (f failedInvitationModel) clone(db *gorm.DB) failedInvitationModel {
	f.failedInvitationModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f failedInvitationModel) replaceDB(db *gorm.DB) failedInvitationModel {
	f.failedInvitationModelDo.ReplaceDB(db)
	return f
}

type failedInvitationModelDo struct{ gen.DO }

type IFailedInvitationModelDo interface {
	gen.SubQuery
	Debug() IFailedInvitationModelDo
	WithContext(ctx context.Context) IFailedInvitationModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFailedInvitationModelDo
	WriteDB() IFailedInvitationModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFailedInvitationModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFailedInvitationModelDo
	Not(conds ...gen.Condition) IFailedInvitationModelDo
	Or(conds ...gen.Condition) IFailedInvitationModelDo
	Select(conds ...field.Expr) IFailedInvitationModelDo
	Where(conds ...gen.Condition) IFailedInvitationModelDo
	Order(conds ...field.Expr) IFailedInvitationModelDo
	Distinct(cols ...field.Expr) IFailedInvitationModelDo
	Omit(cols ...field.Expr) IFailedInvitationModelDo
	Join(table schema.Tabler, on ...field.Expr) IFailedInvitationModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFailedInvitationModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFailedInvitationModelDo
	Group(cols ...field.Expr) IFailedInvitationModelDo
	Having(conds ...gen.Condition) IFailedInvitationModelDo
	Limit(limit int) IFailedInvitationModelDo
	Offset(offset int) IFailedInvitationModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFailedInvitationModelDo
	Unscoped() IFailedInvitationModelDo
	Create(values ...*model.FailedInvitationModel) error
	CreateInBatches(values []*model.FailedInvitationModel, batchSize int) error
	Save(values ...*model.FailedInvitationModel) error
	First() (*model.FailedInvitationModel, error)
	Take() (*model.FailedInvitationModel, error)
	Last() (*model.FailedInvitationModel, error)
	Find() ([]*model.FailedInvitationModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FailedInvitationModel, err error)
	FindInBatches(result *[]*model.FailedInvitationModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FailedInvitationModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFailedInvitationModelDo
	Assign(attrs ...field.AssignExpr) IFailedInvitationModelDo
	Joins(fields ...field.RelationField) IFailedInvitationModelDo
	Preload(fields ...field.RelationField) IFailedInvitationModelDo
	FirstOrInit() (*model.FailedInvitationModel, error)
	FirstOrCreate() (*model.FailedInvitationModel, error)
	FindByPage(offset int, limit int) (result []*model.FailedInvitationModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFailedInvitationModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f failedInvitationModelDo) Debug() IFailedInvitationModelDo {
	return f.withDO(f.DO.Debug())
}

func (f failedInvitationModelDo) WithContext(ctx context.Context) IFailedInvitationModelDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f failedInvitationModelDo) ReadDB() IFailedInvitationModelDo {
	return f.Clauses(dbresolver.Read)
}

func (f failedInvitationModelDo) WriteDB() IFailedInvitationModelDo {
	return f.Clauses(dbresolver.Write)
}

func (f failedInvitationModelDo) Session(config *gorm.Session) IFailedInvitationModelDo {
	return f.withDO(f.DO.Session(config))
}

func (f failedInvitationModelDo) Clauses(conds ...clause.Expression) IFailedInvitationModelDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f failedInvitationModelDo) Returning(value interface{}, columns ...string) IFailedInvitationModelDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f failedInvitationModelDo) Not(conds ...gen.Condition) IFailedInvitationModelDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f failedInvitationModelDo) Or(conds ...gen.Condition) IFailedInvitationModelDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f failedInvitationModelDo) Select(conds ...field.Expr) IFailedInvitationModelDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f failedInvitationModelDo) Where(conds ...gen.Condition) IFailedInvitationModelDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f failedInvitationModelDo) Order(conds ...field.Expr) IFailedInvitationModelDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f failedInvitationModelDo) Distinct(cols ...field.Expr) IFailedInvitationModelDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f failedInvitationModelDo) Omit(cols ...field.Expr) IFailedInvitationModelDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f failedInvitationModelDo) Join(table schema.Tabler, on ...field.Expr) IFailedInvitationModelDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f failedInvitationModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFailedInvitationModelDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f failedInvitationModelDo) RightJoin(table schema.Tabler, on ...field.Expr) IFailedInvitationModelDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f failedInvitationModelDo) Group(cols ...field.Expr) IFailedInvitationModelDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f failedInvitationModelDo) Having(conds ...gen.Condition) IFailedInvitationModelDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f failedInvitationModelDo) Limit(limit int) IFailedInvitationModelDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f failedInvitationModelDo) Offset(offset int) IFailedInvitationModelDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f failedInvitationModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFailedInvitationModelDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f failedInvitationModelDo) Unscoped() IFailedInvitationModelDo {
	return f.withDO(f.DO.Unscoped())
}

func (f failedInvitationModelDo) Create(values ...*model.FailedInvitationModel) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f failedInvitationModelDo) CreateInBatches(values []*model.FailedInvitationModel, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f failedInvitationModelDo) Save(values ...*model.FailedInvitationModel) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f failedInvitationModelDo) First() (*model.FailedInvitationModel, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FailedInvitationModel), nil
	}
}

func (f failedInvitationModelDo) Take() (*model.FailedInvitationModel, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FailedInvitationModel), nil
	}
}

func (f failedInvitationModelDo) Last() (*model.FailedInvitationModel, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FailedInvitationModel), nil
	}
}

func (f failedInvitationModelDo) Find() ([]*model.FailedInvitationModel, error) {
	result, err := f.DO.Find()
	return result.([]*model.FailedInvitationModel), err
}

func (f failedInvitationModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FailedInvitationModel, err error) {
	buf := make([]*model.FailedInvitationModel, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f failedInvitationModelDo) FindInBatches(result *[]*model.FailedInvitationModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f failedInvitationModelDo) Attrs(attrs ...field.AssignExpr) IFailedInvitationModelDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f failedInvitationModelDo) Assign(attrs ...field.AssignExpr) IFailedInvitationModelDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f failedInvitationModelDo) Joins(fields ...field.RelationField) IFailedInvitationModelDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f failedInvitationModelDo) Preload(fields ...field.RelationField) IFailedInvitationModelDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f failedInvitationModelDo) FirstOrInit() (*model.FailedInvitationModel, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FailedInvitationModel), nil
	}
}

func (f failedInvitationModelDo) FirstOrCreate() (*model.FailedInvitationModel, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FailedInvitationModel), nil
	}
}

func (f failedInvitationModelDo) FindByPage(offset int, limit int) (result []*model.FailedInvitationModel, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f failedInvitationModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f failedInvitationModelDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f failedInvitationModelDo) Delete(models ...*model.FailedInvitationModel) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *failedInvitationModelDo) withDO(do gen.Dao) *failedInvitationModelDo {
	f.DO = *do.(*gen.DO)
	return f
}
