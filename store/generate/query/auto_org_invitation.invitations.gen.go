// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Nicknamezz00/org-invitation-autobot/store/generate/model"
)

func newInvitationModel(db *gorm.DB, opts ...gen.DOOption) invitationModel {
	_invitationModel := invitationModel{}

	_invitationModel.invitationModelDo.UseDB(db, opts...)
	_invitationModel.invitationModelDo.UseModel(&model.InvitationModel{})

	tableName := _invitationModel.invitationModelDo.TableName()
	_invitationModel.ALL = field.NewAsterisk(tableName)
	_invitationModel.ID = field.NewString(tableName, "id")
	_invitationModel.OrderID = field.NewInt64(tableName, "order_id")
	_invitationModel.GithubUsername = field.NewString(tableName, "github_username")
	_invitationModel.GithubEmail = field.NewString(tableName, "github_email")
	_invitationModel.InvitationStatus = field.NewString(tableName, "invitation_status")
	_invitationModel.FirstError = field.NewString(tableName, "first_error")
	_invitationModel.CreatedAt = field.NewTime(tableName, "created_at")
	_invitationModel.UpdatedAt = field.NewTime(tableName, "updated_at")

	_invitationModel.fillFieldMap()

	return _invitationModel
}

type invitationModel struct {
	invitationModelDo invitationModelDo

	ALL              field.Asterisk
	ID               field.String
	OrderID          field.Int64
	GithubUsername   field.String
	GithubEmail      field.String
	InvitationStatus field.String
	FirstError       field.String
	CreatedAt        field.Time
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (i invitationModel) Table(newTableName string) *invitationModel {
	i.invitationModelDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i invitationModel) As(alias string) *invitationModel {
	i.invitationModelDo.DO = *(i.invitationModelDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *invitationModel) updateTableName(table string) *invitationModel {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewString(table, "id")
	i.OrderID = field.NewInt64(table, "order_id")
	i.GithubUsername = field.NewString(table, "github_username")
	i.GithubEmail = field.NewString(table, "github_email")
	i.InvitationStatus = field.NewString(table, "invitation_status")
	i.FirstError = field.NewString(table, "first_error")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *invitationModel) WithContext(ctx context.Context) IInvitationModelDo {
	return i.invitationModelDo.WithContext(ctx)
}

func (i invitationModel) TableName() string { return i.invitationModelDo.TableName() }

func (i invitationModel) Alias() string { return i.invitationModelDo.Alias() }

func (i invitationModel) Columns(cols ...field.Expr) gen.Columns {
	return i.invitationModelDo.Columns(cols...)
}

func (i *invitationModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *invitationModel) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 8)
	i.fieldMap["id"] = i.ID
	i.fieldMap["order_id"] = i.OrderID
	i.fieldMap["github_username"] = i.GithubUsername
	i.fieldMap["github_email"] = i.GithubEmail
	i.fieldMap["invitation_status"] = i.InvitationStatus
	i.fieldMap["first_error"] = i.FirstError
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i invitationModel) clone(db *gorm.DB) invitationModel {
	i.invitationModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i invitationModel) replaceDB(db *gorm.DB) invitationModel {
	i.invitationModelDo.ReplaceDB(db)
	return i
}

type invitationModelDo struct{ gen.DO }

type IInvitationModelDo interface {
	gen.SubQuery
	Debug() IInvitationModelDo
	WithContext(ctx context.Context) IInvitationModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInvitationModelDo
	WriteDB() IInvitationModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInvitationModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInvitationModelDo
	Not(conds ...gen.Condition) IInvitationModelDo
	Or(conds ...gen.Condition) IInvitationModelDo
	Select(conds ...field.Expr) IInvitationModelDo
	Where(conds ...gen.Condition) IInvitationModelDo
	Order(conds ...field.Expr) IInvitationModelDo
	Distinct(cols ...field.Expr) IInvitationModelDo
	Omit(cols ...field.Expr) IInvitationModelDo
	Join(table schema.Tabler, on ...field.Expr) IInvitationModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInvitationModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInvitationModelDo
	Group(cols ...field.Expr) IInvitationModelDo
	Having(conds ...gen.Condition) IInvitationModelDo
	Limit(limit int) IInvitationModelDo
	Offset(offset int) IInvitationModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInvitationModelDo
	Unscoped() IInvitationModelDo
	Create(values ...*model.InvitationModel) error
	CreateInBatches(values []*model.InvitationModel, batchSize int) error
	Save(values ...*model.InvitationModel) error
	First() (*model.InvitationModel, error)
	Take() (*model.InvitationModel, error)
	Last() (*model.InvitationModel, error)
	Find() ([]*model.InvitationModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InvitationModel, err error)
	FindInBatches(result *[]*model.InvitationModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InvitationModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInvitationModelDo
	Assign(attrs ...field.AssignExpr) IInvitationModelDo
	Joins(fields ...field.RelationField) IInvitationModelDo
	Preload(fields ...field.RelationField) IInvitationModelDo
	FirstOrInit() (*model.InvitationModel, error)
	FirstOrCreate() (*model.InvitationModel, error)
	FindByPage(offset int, limit int) (result []*model.InvitationModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInvitationModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i invitationModelDo) Debug() IInvitationModelDo {
	return i.withDO(i.DO.Debug())
}

func (i invitationModelDo) WithContext(ctx context.Context) IInvitationModelDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i invitationModelDo) ReadDB() IInvitationModelDo {
	return i.Clauses(dbresolver.Read)
}

func (i invitationModelDo) WriteDB() IInvitationModelDo {
	return i.Clauses(dbresolver.Write)
}

func (i invitationModelDo) Session(config *gorm.Session) IInvitationModelDo {
	return i.withDO(i.DO.Session(config))
}

func (i invitationModelDo) Clauses(conds ...clause.Expression) IInvitationModelDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i invitationModelDo) Returning(value interface{}, columns ...string) IInvitationModelDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i invitationModelDo) Not(conds ...gen.Condition) IInvitationModelDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i invitationModelDo) Or(conds ...gen.Condition) IInvitationModelDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i invitationModelDo) Select(conds ...field.Expr) IInvitationModelDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i invitationModelDo) Where(conds ...gen.Condition) IInvitationModelDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i invitationModelDo) Order(conds ...field.Expr) IInvitationModelDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i invitationModelDo) Distinct(cols ...field.Expr) IInvitationModelDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i invitationModelDo) Omit(cols ...field.Expr) IInvitationModelDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i invitationModelDo) Join(table schema.Tabler, on ...field.Expr) IInvitationModelDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i invitationModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInvitationModelDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i invitationModelDo) RightJoin(table schema.Tabler, on ...field.Expr) IInvitationModelDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i invitationModelDo) Group(cols ...field.Expr) IInvitationModelDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i invitationModelDo) Having(conds ...gen.Condition) IInvitationModelDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i invitationModelDo) Limit(limit int) IInvitationModelDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i invitationModelDo) Offset(offset int) IInvitationModelDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i invitationModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInvitationModelDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i invitationModelDo) Unscoped() IInvitationModelDo {
	return i.withDO(i.DO.Unscoped())
}

func (i invitationModelDo) Create(values ...*model.InvitationModel) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i invitationModelDo) CreateInBatches(values []*model.InvitationModel, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i invitationModelDo) Save(values ...*model.InvitationModel) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i invitationModelDo) First() (*model.InvitationModel, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvitationModel), nil
	}
}

func (i invitationModelDo) Take() (*model.InvitationModel, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvitationModel), nil
	}
}

func (i invitationModelDo) Last() (*model.InvitationModel, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvitationModel), nil
	}
}

func (i invitationModelDo) Find() ([]*model.InvitationModel, error) {
	result, err := i.DO.Find()
	return result.([]*model.InvitationModel), err
}

func (i invitationModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InvitationModel, err error) {
	buf := make([]*model.InvitationModel, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i invitationModelDo) FindInBatches(result *[]*model.InvitationModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i invitationModelDo) Attrs(attrs ...field.AssignExpr) IInvitationModelDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i invitationModelDo) Assign(attrs ...field.AssignExpr) IInvitationModelDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i invitationModelDo) Joins(fields ...field.RelationField) IInvitationModelDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i invitationModelDo) Preload(fields ...field.RelationField) IInvitationModelDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i invitationModelDo) FirstOrInit() (*model.InvitationModel, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvitationModel), nil
	}
}

func (i invitationModelDo) FirstOrCreate() (*model.InvitationModel, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvitationModel), nil
	}
}

func (i invitationModelDo) FindByPage(offset int, limit int) (result []*model.InvitationModel, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i invitationModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i invitationModelDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i invitationModelDo) Delete(models ...*model.InvitationModel) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *invitationModelDo) withDO(do gen.Dao) *invitationModelDo {
	i.DO = *do.(*gen.DO)
	return i
}
